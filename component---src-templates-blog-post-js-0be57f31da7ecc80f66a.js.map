{"version":3,"sources":["webpack://flexible-gatsby/./src/components/seo.js","webpack://flexible-gatsby/./src/templates/blog-post.js"],"names":["SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","defaultProps","BlogPostTemplate","render","post","this","props","data","markdownRemark","frontmatter","excerpt","className","img","G","image","childImageSharp","gatsbyImageData","key","src","alt","date","dangerouslySetInnerHTML","__html","html","React"],"mappings":"yJAYA,SAASA,EAAT,GAAkD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAAMC,EAAS,EAATA,MAC9BC,GAASC,oBAAe,YAAxBD,KAcFE,EAAkBN,GAAeI,EAAKG,aAAaP,YAEzD,OACE,gBAAC,IAAD,CACEQ,eAAgB,CACdP,QAEFE,MAAOA,EACPM,cAAa,QAAUL,EAAKG,aAAaJ,MACzCD,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASR,GAEX,CACES,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASP,EAAKG,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASR,GAEX,CACEO,KAAK,sBACLC,QAASL,IAEXQ,OAAOZ,KAKfH,EAAIgB,aAAe,CACjBd,KAAK,KACLC,KAAM,GACNF,YAAY,IAUd,O,yGC7EMgB,E,6FACJC,OAAA,WACE,IAAMC,EAAOC,KAAKC,MAAMC,KAAKC,eAE7B,OACE,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKnB,MAAOe,EAAKK,YAAYpB,MAAOH,YAAakB,EAAKM,UACtD,uBAAKC,UAAU,6BACb,2BAASA,UAAU,gBACjB,uBAAKA,UAAU,gBACZP,EAAKK,YAAYG,KAChB,uBAAKD,UAAU,oBACb,8BACE,gBAAC,EAAAE,EAAD,CACEC,MACEV,EAAKK,YAAYG,IAAIG,gBAAgBC,gBAEvCL,UAAU,aACVM,IACEb,EAAKK,YAAYG,IAAIG,gBAAgBC,gBAAgBE,IAEvDC,IAAI,OAKZ,uBAAKR,UAAU,gBACb,0BAAQA,UAAU,eAChB,sBAAIA,UAAU,cAAcP,EAAKK,YAAYpB,OAC7C,uBAAKsB,UAAU,aACb,4BAAOP,EAAKK,YAAYW,QAG5B,uBAAKC,wBAAyB,CAAEC,OAAQlB,EAAKmB,QAC7C,uBAAKZ,UAAU,sB,GAlCAa,aAuD/B","file":"component---src-templates-blog-post-js-0be57f31da7ecc80f66a.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { useStaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport { kebabCase } from 'lodash'\nimport { GatsbyImage } from 'gatsby-plugin-image'\n\nimport DefaultLayout from '../components/layout'\nimport SEO from '../components/seo'\n\nimport 'katex/dist/katex.min.css'\n\nclass BlogPostTemplate extends React.Component {\n  render() {\n    const post = this.props.data.markdownRemark\n\n    return (\n      <DefaultLayout>\n        <SEO title={post.frontmatter.title} description={post.excerpt} />\n        <div className=\"clearfix post-content-box\">\n          <article className=\"article-page\">\n            <div className=\"page-content\">\n              {post.frontmatter.img && (\n                <div className=\"page-cover-image\">\n                  <figure>\n                    <GatsbyImage\n                      image={\n                        post.frontmatter.img.childImageSharp.gatsbyImageData\n                      }\n                      className=\"page-image\"\n                      key={\n                        post.frontmatter.img.childImageSharp.gatsbyImageData.src\n                      }\n                      alt=\"\"\n                    />\n                  </figure>\n                </div>\n              )}\n              <div className=\"wrap-content\">\n                <header className=\"header-page\">\n                  <h1 className=\"page-title\">{post.frontmatter.title}</h1>\n                  <div className=\"page-date\">\n                    <span>{post.frontmatter.date}</span>\n                  </div>\n                </header>\n                <div dangerouslySetInnerHTML={{ __html: post.html }} />\n                <div className=\"page-footer\">\n                  {/* <div className=\"page-tag\">\n                    {post.frontmatter.tags &&\n                      post.frontmatter.tags.map((tag) => (\n                        <span key={tag}>\n                          <Link className=\"tag\" to={`/tags/${kebabCase(tag)}/`}>\n                            # {tag}\n                          </Link>\n                        </span>\n                      ))}\n                  </div> */}\n                </div>\n              </div>\n            </div>\n          </article>\n        </div>\n      </DefaultLayout>\n    )\n  }\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        author\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        updated_at(formatString: \"YYYY, MMM DD\")\n      }\n    }\n  }\n`\n"],"sourceRoot":""}